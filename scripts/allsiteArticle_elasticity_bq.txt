DECLARE lagDays int64 DEFAULT 7;
DECLARE minUnders int64 DEFAULT 14;
DECLARE minOvers int64 DEFAULT 14;
DECLARE cats ARRAY <STRING>;
DECLARE so ARRAY <STRING>;
DECLARE dateFrom DATE;
DECLARE dateTo DATE;

SET cats = ["MEAT","MEAT CONVENIENCE"];
SET so = ["1005","1030"];

set dateTo = CURRENT_DATE("Australia/Sydney");
set dateFrom = DATE_ADD(dateTo, INTERVAL -(364*2) DAY);

CREATE TEMP FUNCTION safeDiv(numerator FLOAT64, denominator FLOAT64) AS ((case when denominator=0 or denominator is null then null else numerator/denominator end));

#standardSQL
    create or replace table `gcp-wow-finance-de-lab-dev.price_elasticity.PriceElastData` as (
    with asp_dat as
    (
    SELECT
    ifnull(SalesOrg,'') as SalesOrg,
    ifnull(Site,'') as Site,
    ifnull(Article,'') as Article,
    ifnull((case when Sales_Unit in ('CA1','CA2','CA3') then 'CAR' else Sales_Unit end),'') as Sales_Unit, 
    Calendar_Day
    , DATE_ADD(Calendar_Day, INTERVAL -lagDays DAY) as lag_Calendar_Day
    , sum(Sales_ExclTax) as Sales_ExclTax
    , sum(Sales_Qty_SUoM) as Sales_Qty_SUoM
    , (case when sum(Sales_Qty_SUoM) = 0 then NULL else sum(Sales_ExclTax)/sum(Sales_Qty_SUoM) end) as ASP
    , sum(Promo_Sales) as Promo_Sales
    , sum(Promo_Sales_Qty_SUoM) as Promo_Sales_Qty_SUoM
    FROM  `gcp-wow-ent-im-tbl-prod.gs_allgrp_fin_data.fin_group_profit_v`
    WHERE
    Sales_Channel NOT IN ('HDY','HDZ','CCY','CCZ','HD1','CC1') and #instore only. This will help (later) to control for SOH issues.
    SalesOrg in unnest(so) AND
    --Category_Description in UNNEST(cats) AND
    --Calendar_Day between dateFrom AND dateTo
    Calendar_Day >= dateFrom AND 
    Calendar_Day < dateTo
    group by ifnull(SalesOrg,''),
    ifnull(Site,''),
    ifnull(Article,''),
    ifnull((case when Sales_Unit in ('CA1','CA2','CA3') then 'CAR' else Sales_Unit end),''), 
    Calendar_Day
    )
    select a.*,
    a.Sales_ExclTax-b.Sales_ExclTax as Sales_ExclTax_diff,
    a.Sales_Qty_SUoM-b.Sales_Qty_SUoM as Sales_Qty_SUoM_diff,
    b.Sales_ExclTax as Sales_ExclTax_lag,
    b.Sales_Qty_SUoM as Sales_Qty_SUoM_lag,
    b.ASP as ASP_lag,
    a.ASP-b.ASP as ASP_diff,
    (case when b.ASP = 0 then null else a.ASP/b.ASP end) as ASP_v_lag,
    (case when b.Sales_Qty_SUoM = 0 then null else a.Sales_Qty_SUoM/b.Sales_Qty_SUoM end) as Sales_Qty_SUoM_v_lag,
    log(case when b.ASP = 0 then null
    when a.ASP/b.ASP < 0 then null
    else a.ASP/b.ASP end) as log_ASP_v_lag,
    log(case when b.Sales_Qty_SUoM = 0 then null
    when a.Sales_Qty_SUoM/b.Sales_Qty_SUoM < 0 then null
    else a.Sales_Qty_SUoM/b.Sales_Qty_SUoM end) as log_Sales_Qty_SUoM_v_lag,
    (case when a.Sales_ExclTax = 0 then 0
    when a.Promo_Sales/a.Sales_ExclTax > 1 then 1
    else a.Promo_Sales/a.Sales_ExclTax
    end) as promo_perc
    from asp_dat a
    left join (
    SELECT *
    from asp_dat
    ) b
    on (a.lag_Calendar_Day=b.Calendar_Day) AND
    (a.SalesOrg = b.SalesOrg) and
    (a.Site = b.Site) and
    (a.Article=b.Article) AND
    (a.Sales_Unit=b.Sales_Unit)
    where
    b.Sales_Qty_SUoM > 0 AND
    b.Sales_Qty_SUoM is not null AND
    (case when b.ASP = 0 then null else a.ASP/b.ASP end) between 0.25 and 4 AND
    (case when b.ASP = 0 then null else a.ASP/b.ASP end) is not null AND
    log(case when b.ASP = 0 then null when a.ASP/b.ASP < 0 then null else a.ASP/b.ASP end) is not null AND
    log(case when b.Sales_Qty_SUoM = 0 then null when a.Sales_Qty_SUoM/b.Sales_Qty_SUoM < 0 then null else a.Sales_Qty_SUoM/b.Sales_Qty_SUoM end) is not null AND
    (case when b.Sales_Qty_SUoM = 0 then null else a.Sales_Qty_SUoM/b.Sales_Qty_SUoM end) < 100 # remove non-sensicle perc growth
    );

    create temp table addit_cols as (
    SELECT a.SalesOrg, a.Site, a.Article, a.Sales_Unit,
    avg(a.log_ASP_v_lag) as mean_x,
    avg(a.log_Sales_Qty_SUoM_v_lag) as mean_y,
    corr(a.log_ASP_v_lag, log_Sales_Qty_SUoM_v_lag) as corr_xy,
    stddev(a.log_ASP_v_lag) as sd_x,
    stddev(a.log_Sales_Qty_SUoM_v_lag) as sd_y,
    sum(case when a.log_ASP_v_lag > 0.1 then 1 else 0 end) as cnt_overs,
    sum(case when a.log_ASP_v_lag < -0.1 then 1 else 0 end) as cnt_unders,
    avg(case when a.log_ASP_v_lag < -0.1 then 1 else 0 end) as perc_unders,
    sum(Sales_ExclTax) as Sales_ExclTax,
    sum(Sales_Qty_SUoM) as Sales_Qty_SUoM,
    (case when sum(Sales_Qty_SUoM) = 0 then null else sum(Sales_ExclTax)/sum(Sales_Qty_SUoM) end) as ASP
    FROM `gcp-wow-finance-de-lab-dev.price_elasticity.PriceElastData` a
    group by a.SalesOrg, a.Site, a.Article, a.Sales_Unit
    );
    
--     create temp table paste12mSales as (
--     #standardSQL
--     SELECT
--     ifnull(SalesOrg,'') as SalesOrg,
--     ifnull(Article,'') as Article,
--     ifnull((case when Sales_Unit in ('CA1','CA2','CA3') then 'CAR' else Sales_Unit end),'') as Sales_Unit, 
--     sum(Sales_ExclTax) as past12m_Sales_ExclTax
--     FROM  `gcp-wow-ent-im-tbl-prod.gs_allgrp_fin_data.fin_group_profit_v`
--     WHERE
--     SalesOrg in unnest(so) AND
--     --Category_Description in UNNEST(cats) and
--     Calendar_Day between DATE_SUB(CURRENT_DATE(), INTERVAL 364 DAY) and DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)
--     group by ifnull(SalesOrg,''),
--     ifnull(Article,''),
--     ifnull((case when Sales_Unit in ('CA1','CA2','CA3') then 'CAR' else Sales_Unit end),'')
--     );
    
    #create temp table int_slope as (
    create or replace table `gcp-wow-finance-de-lab-dev.price_elasticity.siteArticleSUsummary` as (
    select a.*,
    a.corr_xy*a.sd_y/a.sd_x as slope,
    a.mean_y-a.mean_x*(a.corr_xy*a.sd_y/a.sd_x) as y_intercept
    from addit_cols a
    where ifnull(a.cnt_overs,0)>minOvers and ifnull(a.cnt_unders,0)>minUnders
    order by a.SalesOrg, a.Article, a.Sales_Unit
    );
    
    create or replace table `gcp-wow-finance-de-lab-dev.price_elasticity.PriceElast_distMedians` as (
    select distinct SalesOrg, Article, Sales_Unit, 
    PERCENTILE_CONT(slope, 0.5) over(partition by SalesOrg, Article, Sales_Unit) as median_slope,
    PERCENTILE_CONT(y_intercept, 0.5) over(partition by SalesOrg, Article, Sales_Unit) as median_y_intercept,
    
    PERCENTILE_CONT(slope, 0.1) over(partition by SalesOrg, Article, Sales_Unit) as slope_quantile_10,
    PERCENTILE_CONT(slope, 0.9) over(partition by SalesOrg, Article, Sales_Unit) as slope_quantile_90,
    PERCENTILE_CONT(slope, 0.05) over(partition by SalesOrg, Article, Sales_Unit) as slope_quantile_05,
    PERCENTILE_CONT(slope, 0.95) over(partition by SalesOrg, Article, Sales_Unit) as slope_quantile_95,
    PERCENTILE_CONT(slope, 0.01) over(partition by SalesOrg, Article, Sales_Unit) as slope_quantile_01,
    PERCENTILE_CONT(slope, 0.99) over(partition by SalesOrg, Article, Sales_Unit) as slope_quantile_99,
    PERCENTILE_CONT(slope, 0.25) over(partition by SalesOrg, Article, Sales_Unit) as slope_quantile_25,
    PERCENTILE_CONT(slope, 0.75) over(partition by SalesOrg, Article, Sales_Unit) as slope_quantile_75
    
    from `gcp-wow-finance-de-lab-dev.price_elasticity.siteArticleSUsummary`
    );
    
    create or replace table `gcp-wow-finance-de-lab-dev.price_elasticity.PriceElast_distMeans` as (
    select SalesOrg, Article, Sales_Unit, 
    avg(y_intercept) as mean_y_intercept, avg(slope) as mean_slope, stddev(slope) as stddev_slope,
    avg( (case when slope < -1 then 1 else 0 end) ) as prob_elastic,
    count(*) as n
    #from int_slope
    from `gcp-wow-finance-de-lab-dev.price_elasticity.siteArticleSUsummary`
    group by SalesOrg, Article, Sales_Unit
    having  count(*) >= 10
    order by SalesOrg, Article, Sales_Unit
    );
    
    create or replace table `gcp-wow-finance-de-lab-dev.price_elasticity.PriceElast_dist` as (
    select a.*, 
    b.median_slope, b.median_y_intercept,
    b.slope_quantile_25, b.slope_quantile_75, b.slope_quantile_10, b.slope_quantile_90, b.slope_quantile_05, b.slope_quantile_95, b.slope_quantile_01, b.slope_quantile_99
    
    from `gcp-wow-finance-de-lab-dev.price_elasticity.PriceElast_distMeans` a
    inner join
    `gcp-wow-finance-de-lab-dev.price_elasticity.PriceElast_distMedians` b
    on (a.SalesOrg=b.SalesOrg) and (a.Article=b.Article) and (a.Sales_Unit=b.Sales_Unit)
    );
    
    create or replace table `gcp-wow-finance-de-lab-dev.price_elasticity.PriceElast_dist_details` as (
    select dateFrom as from_date, dateTo as to_date,
    c.DepartmentDescription,c.CategoryDescription, c.Sub_CategoryDescription,c.SegmentDescription, c.MerchandiseManagerName, c.CategoryManagerName,
    d.Article_Description,
    a.*, 
    b.past12m_Sales_ExclTax, b.past4w_Sales_ExclTax, b.past13w_Sales_ExclTax, b.past7d_Sales_ExclTax,
    b.past12m_Promo_Sales, b.past4w_Promo_Sales, b.past13w_Promo_Sales, b.past7d_Promo_Sales,
    b.ASP_whenNotOnPromo,
    
    safeDiv(b.past12m_Promo_Sales, b.past12m_Sales_ExclTax) as past12m_perc_sales_promo_sales,
    safeDiv(b.past4w_Promo_Sales, b.past4w_Sales_ExclTax) as past4w_perc_sales_promo_sales,
    safeDiv(b.past13w_Promo_Sales, b.past13w_Sales_ExclTax) as past13w_perc_sales_promo_sales,
    safeDiv(b.past7d_Promo_Sales, b.past7d_Sales_ExclTax) as past7d_perc_sales_promo_sales,
    
    (-1 - a.mean_slope)/a.stddev_slope as z_zero
    from `gcp-wow-finance-de-lab-dev.price_elasticity.PriceElast_dist` a
    inner join
    (
    SELECT
    ifnull(SalesOrg,'') as SalesOrg,
    ifnull(Article,'') as Article,
    ifnull((case when Sales_Unit in ('CA1','CA2','CA3') then 'CAR' else Sales_Unit end),'') as Sales_Unit, 
    sum(Sales_ExclTax) as past12m_Sales_ExclTax,
    sum((case when Calendar_Day >= DATE_SUB(CURRENT_DATE(), INTERVAL (7*4) DAY) then Sales_ExclTax else 0 end)) as past4w_Sales_ExclTax,
    sum((case when Calendar_Day >= DATE_SUB(CURRENT_DATE(), INTERVAL (7*13) DAY) then Sales_ExclTax else 0 end)) as past13w_Sales_ExclTax,
    sum((case when Calendar_Day >= DATE_SUB(CURRENT_DATE(), INTERVAL (7*1) DAY) then Sales_ExclTax else 0 end)) as past7d_Sales_ExclTax,
    
    sum( (case when Offer_Id not in ('', 'UNK') and Offer_Id is not null then Promo_Sales else 0 end )) as past12m_Promo_Sales,
    sum( (case when Offer_Id not in ('', 'UNK') and Offer_Id is not null and
    Calendar_Day >= DATE_SUB(CURRENT_DATE(), INTERVAL (7*4) DAY) then Promo_Sales else 0 end)) as past4w_Promo_Sales,
    sum( (case when Offer_Id not in ('', 'UNK') and Offer_Id is not null and
    Calendar_Day >= DATE_SUB(CURRENT_DATE(), INTERVAL (7*13) DAY) then Promo_Sales else 0 end)) as past13w_Promo_Sales,
    sum( (case when Offer_Id not in ('', 'UNK') and Offer_Id is not null and
    Calendar_Day >= DATE_SUB(CURRENT_DATE(), INTERVAL (7*1) DAY) then Promo_Sales else 0 end)) as past7d_Promo_Sales,
    
    if(sum(if(Offer_Id not in ('', 'UNK'),Sales_Qty_SUoM,0))=0,NULL,
    sum(if(Offer_Id not in ('', 'UNK'),Sales_ExclTax,0))/sum(if(Offer_Id not in ('', 'UNK'),Sales_Qty_SUoM,0))
    ) as ASP_whenNotOnPromo
    
    FROM  `gcp-wow-ent-im-tbl-prod.gs_allgrp_fin_data.fin_group_profit_v`
    WHERE
    Calendar_Day between DATE_SUB(CURRENT_DATE(), INTERVAL 364 DAY) and DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)
    group by ifnull(SalesOrg,''),
    ifnull(Article,''),
    ifnull((case when Sales_Unit in ('CA1','CA2','CA3') then 'CAR' else Sales_Unit end),'')
    ) b on (a.SalesOrg=b.SalesOrg) and (a.Article=b.Article) and (a.Sales_Unit=b.Sales_Unit)
    inner join
    `gcp-wow-ent-im-tbl-prod.adp_masterdata_view.dim_article_hierarchy_curr_v` c on (a.SalesOrg=c.SalesOrg) and (a.Article=c.Article)
    inner join (
    select distinct  ifnull(SalesOrg,'') as SalesOrg, ifnull(Article,'') as Article,  ifnull(Article_Description,'') as Article_Description
    from `gcp-wow-ent-im-tbl-prod.gs_allgrp_fin_data.fin_group_profit_v`
    ) d  on (a.SalesOrg=d.SalesOrg) and (a.Article=d.Article)
    order by past12m_Sales_ExclTax desc
    );
